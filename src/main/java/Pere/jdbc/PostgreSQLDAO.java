package Pere.jdbc;

import DAO.Department;
import DAO.Employee;
import DAO.IDAO;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class PostgreSQLDAO implements IDAO {

    /** PostgreSQL database connection URL */
    private final String url = "jdbc:postgresql://pm0002.conectabalear.net:5432/empresa";
    /** Database user */
    private final String user = "test";
    /** Database password */
    private final String password = "contrase√±a_segura_patata_12112";

    /**
     * Obtains a connection to the database.
     *
     * @return a {@link Connection} object for interacting with the database.
     * @throws SQLException if an error occurs while establishing the connection.
     */
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    /**
     * Retrieves all employees from the "empleado" table.
     *
     * @return a list of {@link Employee} objects.
     */
    @Override
    public List<Employee> findAllEmployees() {
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT empno, nombre, puesto, depno FROM empleado";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Employee emp = new Employee(
                        rs.getInt("empno"),
                        rs.getString("nombre"),
                        rs.getString("puesto"),
                        new Department(rs.getInt("depno"), null, null)
                );
                employees.add(emp);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return employees;
    }

    /**
     * Finds an employee by its ID (empno).
     *
     * @param id the employee's identifier (should be an {@code int}).
     * @return the {@link Employee} object if found, or {@code null} otherwise.
     */
    @Override
    public Employee findEmployeeById(Object id) {
        Employee emp = null;
        String sql = "SELECT empno, nombre, puesto, depno FROM empleado WHERE empno = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, (int) id);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                emp = new Employee(
                        rs.getInt("empno"),
                        rs.getString("nombre"),
                        rs.getString("puesto"),
                        new Department(rs.getInt("depno"), null, null)
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return emp;
    }

    /**
     * Adds a new employee to the database.
     * <p>
     * It is assumed that the "empno" column is auto-generated by the database.
     * </p>
     *
     * @param employee the {@link Employee} object to add (the id will be auto-assigned).
     */

    @Override
    public void addEmployee(Employee employee) {
        // It is assumed that the "empno" column is SERIAL and auto-generated.
        String sql = "INSERT INTO empleado (nombre, puesto, depno) VALUES (?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, employee.getName());
            pstmt.setString(2, employee.getJob());
            pstmt.setInt(3, employee.getDepartment().getId());
            pstmt.executeUpdate();

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int generatedId = generatedKeys.getInt(1);
                    employee.setId(generatedId);
                }
            }
        } catch (SQLException e) {
            if ("23503".equals(e.getSQLState())) { // Foreign key violation
                System.out.println("Error: The specified department does not exist. Please add the department first.");
            } else {
                e.printStackTrace();
            }
        }
    }

    /**
     * Updates an existing employee.
     * <p>
     * This method displays an interactive menu to select the field to update:
     * <ul>
     *   <li>1 - Name</li>
     *   <li>2 - Job</li>
     *   <li>3 - Department (depno)</li>
     * </ul>
     * </p>
     *
     * @param id the identifier of the employee to update.
     * @return the updated {@link Employee} object, or {@code null} if not found or if the update was canceled.
     */
    @Override
    public Employee updateEmployee(Object id) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Select the field to update:");
        System.out.println("1. Name");
        System.out.println("2. Job");
        System.out.println("3. Department (depno)");
        System.out.print("Option: ");
        int option = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        String field = "";
        switch (option) {
            case 1:
                field = "nombre";
                break;
            case 2:
                field = "puesto";
                break;
            case 3:
                field = "depno";
                break;
            default:
                System.out.println("Invalid option.");
                return null;
        }

        System.out.print("Enter the new value for " + field + ": ");
        String newValue = scanner.nextLine();

        String sql = "UPDATE empleado SET " + field + " = ? WHERE empno = ? RETURNING empno, nombre, puesto, depno";
        Employee emp = null;
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            if (field.equals("depno")) {
                pstmt.setInt(1, Integer.parseInt(newValue));
            } else {
                pstmt.setString(1, newValue);
            }
            pstmt.setInt(2, (int) id);

            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                emp = new Employee(
                        rs.getInt("empno"),
                        rs.getString("nombre"),
                        rs.getString("puesto"),
                        new Department(rs.getInt("depno"), null, null)
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return emp;
    }

    /**
     * Deletes an employee from the database.
     *
     * @param id the identifier of the employee to delete.
     * @return {@code true} if the deletion was successful; {@code false} otherwise.
     */
    @Override
    public boolean deleteEmployee(Object id) {
        boolean deleted = false;
        String sql = "DELETE FROM empleado WHERE empno = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, (int) id);
            int affectedRows = pstmt.executeUpdate();
            deleted = affectedRows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return deleted;
    }

    /**
     * Finds employees that belong to a specific department.
     *
     * @param idDept the identifier of the department.
     * @return a list of {@link Employee} objects belonging to the specified department.
     */
    @Override
    public List<Employee> findEmployeesByDept(Object idDept) {
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT empno, nombre, puesto, depno FROM empleado WHERE depno = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, (int) idDept);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Employee emp = new Employee(
                        rs.getInt("empno"),
                        rs.getString("nombre"),
                        rs.getString("puesto"),
                        new Department(rs.getInt("depno"), null, null)
                );
                employees.add(emp);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return employees;
    }

    /**
     * Retrieves all departments from the "departamento" table.
     *
     * @return a list of {@link Department} objects.
     */
    @Override
    public List<Department> findAllDepartments() {
        List<Department> departments = new ArrayList<>();
        String sql = "SELECT depno, nombre, ubicacion FROM departamento";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Department dept = new Department(
                        rs.getInt("depno"),
                        rs.getString("nombre"),
                        rs.getString("ubicacion")
                );
                departments.add(dept);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return departments;
    }

    /**
     * Finds a department by its ID.
     *
     * @param id the identifier of the department.
     * @return the {@link Department} object if found; {@code null} otherwise.
     */
    @Override
    public Department findDepartmentById(Object id) {
        Department dept = null;
        String sql = "SELECT depno, nombre, ubicacion FROM departamento WHERE depno = ?";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, (int) id);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                dept = new Department(
                        rs.getInt("depno"),
                        rs.getString("nombre"),
                        rs.getString("ubicacion")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dept;
    }

    /**
     * Adds a new department to the database.
     *
     * @param department the {@link Department} object to add.
     * @return {@code true} if the insertion was successful; {@code false} otherwise.
     */
    @Override
    public boolean addDepartment(Department department) {
        boolean added = false;
        String sql = "INSERT INTO departamento (depno, nombre, ubicacion) VALUES (?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, department.getId());
            pstmt.setString(2, department.getName());
            pstmt.setNull(3, Types.VARCHAR);
            int affectedRows = pstmt.executeUpdate();
            added = affectedRows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return added;
    }

    /**
     * Updates an existing department.
     * <p>
     * This method displays an interactive menu to update:
     * <ul>
     *   <li>1 - Name</li>
     *   <li>2 - Location</li>
     *   <li>3 - Both</li>
     * </ul>
     * </p>
     *
     * @param id the identifier of the department to update.
     * @return the updated {@link Department} object or {@code null} if not found or if the update was canceled.
     */
    @Override
    public Department updateDepartment(Object id) {
        Department dept = null;
        Scanner scanner = new Scanner(System.in);

        System.out.println("Select the field to update:");
        System.out.println("1. Name");
        System.out.println("2. Location");
        System.out.println("3. Both");
        System.out.print("Option: ");
        int option = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        String sql = "";
        switch (option) {
            case 1:
                sql = "UPDATE departamento SET nombre = ? WHERE depno = ? RETURNING depno, nombre, ubicacion";
                break;
            case 2:
                sql = "UPDATE departamento SET ubicacion = ? WHERE depno = ? RETURNING depno, nombre, ubicacion";
                break;
            case 3:
                sql = "UPDATE departamento SET nombre = ?, ubicacion = ? WHERE depno = ? RETURNING depno, nombre, ubicacion";
                break;
            default:
                System.out.println("Invalid option.");
                return null;
        }

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            switch (option) {
                case 1:
                    System.out.print("Enter the new name: ");
                    String newName = scanner.nextLine();
                    pstmt.setString(1, newName);
                    pstmt.setInt(2, (int) id);
                    break;
                case 2:
                    System.out.print("Enter the new location: ");
                    String newLocation = scanner.nextLine();
                    pstmt.setString(1, newLocation);
                    pstmt.setInt(2, (int) id);
                    break;
                case 3:
                    System.out.print("Enter the new name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter the new location: ");
                    String location = scanner.nextLine();
                    pstmt.setString(1, name);
                    pstmt.setString(2, location);
                    pstmt.setInt(3, (int) id);
                    break;
            }

            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                dept = new Department(
                        rs.getInt("depno"),
                        rs.getString("nombre"),
                        rs.getString("ubicacion")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dept;
    }

    /**
     * Deletes a department from the database.
     * <p>
     * The department is deleted if it exists, and the deleted object is returned; otherwise, {@code null} is returned.
     * </p>
     *
     * @param id the identifier of the department to delete.
     * @return the deleted {@link Department} object or {@code null} if not found.
     */
    @Override
    public Department deleteDepartment(Object id) {
        Department dept = findDepartmentById(id);
        if (dept != null) {
            String sql = "DELETE FROM departamento WHERE depno = ?";
            try (Connection conn = getConnection();
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setInt(1, (int) id);
                pstmt.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return dept;
    }
}
